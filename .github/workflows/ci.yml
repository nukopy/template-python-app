name: CI

on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry" # use "poetry.lock" for cache key  (ref: https://github.com/actions/setup-python/tree/v4/#caching-packages-dependencies)
      - name: Install dependencies
        run: poetry install
      - name: Format
        run: bash scripts/format.sh

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry" # use "poetry.lock" for cache key (ref: https://github.com/actions/setup-python/tree/v4/#caching-packages-dependencies)
      - name: Install dependencies
        run: poetry install
      - name: Lint
        run: bash scripts/lint.sh

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry" # use "poetry.lock" for cache key (ref: https://github.com/actions/setup-python/tree/v4/#caching-packages-dependencies)
      - name: Install dependencies
        run: poetry install
      - name: Test
        run: bash scripts/test.sh
      # ref for codecov: https://github.com/nukopy/tdd-python/blob/master/.github/workflows/test.yml#L64
      # - name: Run Tests
      #   run: poetry run pytest -v tests --junitxml=junit/test-results.xml --cov=app --cov-report=xml --cov-report=html
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v1.0.6
      #   with:
      #     name: codecov
      #     file: ./coverage.xml
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: true
